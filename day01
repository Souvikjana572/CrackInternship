//day 01 , solved easy array questions in cpp
//1.remove duplicate from sorted array
class Solution {
public:
     int removeDuplicates(vector<int>& nums) {
        int j = 1;
        for(int i = 1; i < nums.size(); i++){
            if(nums[i] != nums[i - 1]){
                nums[j] = nums[i];
                j++;
            }
        }
        return j;
    }
};
//2.move zeroes (#283)
class Solution {
public:
    void moveZeroes(vector<int>& nums) {
        if(nums.size()==0||nums.size()==1)return ;
        int first=0,second=1;
        while(first<nums.size()&&second<nums.size()){
            if(nums[first]==0&&nums[second]){
                swap(nums[first],nums[second]);
                first++;second++;
            }
            else if(nums[first] && !nums[second]){
                first++;second++;
            }
            else if(!nums[first]&& !nums[second]){
                second++;
            }
            else{
                first++;second++;
            }
        }
        return ;
    }
};
//3. Best Time to Buy and Sell Stock(#121)
class Solution {
public:
    int maxProfit(vector<int>& prices) {
       
        int buy=prices[0],profit=0;
        for(int i=1;i<prices.size();i++){
           if(prices[i]<buy)
               buy=prices[i];
            else if(prices[i]-buy > profit)
                profit=prices[i]-buy;
        }
      return profit;
    }
};
//4.Chocolate Distribution Problem(gfg)
Class Solution{
   public:
    long long findMinDiff(vector<long long> a, long long n, long long m){
     sort(a.begin(),a.end());
    int mini=INT_MAX;
    for(int i=0;i<=n-m;i++)
    {
        int k=a[i+m-1]-a[i];
        mini=min(mini,k);
    }
    return mini;
    }   
};
//5.Two Sum(#1)
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
       vector<int>A;
       for (int i=0;i<=nums.size();i++){
             for(int j=i+1;j<=nums.size()-1;j++){
               if(nums[i]+nums[j]==target){
                   A.push_back(i);
                   A.push_back(j);  
               }
               
             }
       }
        return A;
        
    }
};
//6.merge sorted array(#88)
class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        int i = m - 1, j = n - 1, k = m + n - 1;
        while (i >= 0 and j >= 0) {
            if (nums1[i] < nums2[j])
                nums1[k--] = nums2[j--];
            else
                nums1[k--] = nums1[i--];
        }
        while (j >= 0) {
            nums1[k--] = nums2[j--];
        }
    }
};
//7.majority element(#169)
class Solution {
public:
   int majorityElement(vector<int>& nums) {
        unordered_map<int, int> f;
        for(auto i : nums){
            ++f[i];
        }
        for(auto i : f){
            if(i.second > nums.size() / 2){
                return i.first;
            }
        }
        return 0;
    }
};
